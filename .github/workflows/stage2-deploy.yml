name: Stage 2 - Provision Staging & Deploy

on:
  workflow_run:
    workflows: ["CI - Test, Build & Push to ACR (Stage 1)"]
    types: [completed]

permissions:
  contents: read
  id-token: write

env:
  LOCATION: australiaeast
  RG_PREFIX: sit722-staging
  ACR_NAME: ${{ secrets.ACR_NAME }}
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}

concurrency:
  group: stage2-${{ github.ref }}
  cancel-in-progress: false

jobs:
  deploy-staging:
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'testing' }}
    runs-on: ubuntu-latest
    defaults: { run: { shell: bash } }

    steps:
      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Install Container Apps extension
        run: |
          az extension add --name containerapp --upgrade -y || az extension update --name containerapp -y

      # (Optional) checkout just to help us verify what's on main
      - uses: actions/checkout@v4

      - name: Compute variables
        id: vars
        run: |
          echo "IMAGE_TAG=${{ github.event.workflow_run.head_sha }}" >> "$GITHUB_OUTPUT"
          echo "RG=${{ env.RG_PREFIX }}-${{ github.run_id }}"       >> "$GITHUB_OUTPUT"
          echo "ENV_NAME=aca-${{ github.run_id }}"                   >> "$GITHUB_OUTPUT"

      - name: Create resource group
        run: az group create -n "${{ steps.vars.outputs.RG }}" -l "${{ env.LOCATION }}"

      - name: Ensure providers registered
        run: az provider register --namespace Microsoft.App --wait

      # âœ… No Log Analytics flags here
      - name: Create Container Apps environment (no LA)
        run: |
          az containerapp env create \
            -g "${{ steps.vars.outputs.RG }}" \
            -n "${{ steps.vars.outputs.ENV_NAME }}" \
            -l "${{ env.LOCATION }}"

      - name: Assign system identity to env
        run: |
          az containerapp env identity assign \
            -g "${{ steps.vars.outputs.RG }}" \
            -n "${{ steps.vars.outputs.ENV_NAME }}" \
            --system-assigned

      - name: Grant env identity ACR Pull & set registry
        run: |
          set -e
          ACR_ID=$(az acr show -n "${{ env.ACR_NAME }}" --query id -o tsv)
          ENV_MI_PRINCIPAL_ID=$(az containerapp env show \
            -g "${{ steps.vars.outputs.RG }}" \
            -n "${{ steps.vars.outputs.ENV_NAME }}" \
            --query identity.principalId -o tsv)
          az role assignment create \
            --assignee-object-id "$ENV_MI_PRINCIPAL_ID" \
            --assignee-principal-type ServicePrincipal \
            --role AcrPull \
            --scope "$ACR_ID"
          az containerapp registry set \
            -g "${{ steps.vars.outputs.RG }}" \
            --environment "${{ steps.vars.outputs.ENV_NAME }}" \
            --server "${{ env.ACR_LOGIN_SERVER }}" \
            --identity system

      - name: Deploy/Update services
        id: deploy
        run: |
          set -e
          IMAGE_TAG="${{ steps.vars.outputs.IMAGE_TAG }}"
          RG="${{ steps.vars.outputs.RG }}"
          ENV_NAME="${{ steps.vars.outputs.ENV_NAME }}"

          upsert_app () {
            local NAME=$1 PORT=$2 IMAGE=$3 EXTRA=${4:-}
            if az containerapp show -g "$RG" -n "$NAME" >/dev/null 2>&1; then
              az containerapp update -g "$RG" -n "$NAME" --image "$IMAGE" $EXTRA
            else
              az containerapp create -g "$RG" -n "$NAME" \
                --environment "$ENV_NAME" \
                --image "$IMAGE" \
                --ingress external --target-port "$PORT" --transport auto \
                $EXTRA
            fi
          }

          upsert_app "customer-service" 8002 "${{ env.ACR_LOGIN_SERVER }}/customer-service:${IMAGE_TAG}"
          CUSTOMER_FQDN=$(az containerapp show -g "$RG" -n customer-service --query "properties.configuration.ingress.fqdn" -o tsv)

          upsert_app "product-service" 8003 "${{ env.ACR_LOGIN_SERVER }}/product-service:${IMAGE_TAG}"
          PRODUCT_FQDN=$(az containerapp show -g "$RG" -n product-service --query "properties.configuration.ingress.fqdn" -o tsv)

          upsert_app "order-service" 8001 "${{ env.ACR_LOGIN_SERVER }}/order-service:${IMAGE_TAG}" "--env-vars CUSTOMER_SERVICE_URL=http://${CUSTOMER_FQDN}"
          ORDER_FQDN=$(az containerapp show -g "$RG" -n order-service --query "properties.configuration.ingress.fqdn" -o tsv)

          upsert_app "frontend" 80 "${{ env.ACR_LOGIN_SERVER }}/frontend:${IMAGE_TAG}"
          FRONTEND_FQDN=$(az containerapp show -g "$RG" -n frontend --query "properties.configuration.ingress.fqdn" -o tsv)

          echo "CUSTOMER_URL=http://${CUSTOMER_FQDN}"  >> "$GITHUB_OUTPUT"
          echo "PRODUCT_URL=http://${PRODUCT_FQDN}"    >> "$GITHUB_OUTPUT"
          echo "ORDER_URL=http://${ORDER_FQDN}"        >> "$GITHUB_OUTPUT"
          echo "FRONTEND_URL=http://${FRONTEND_FQDN}"  >> "$GITHUB_OUTPUT"

      - name: Smoke test (light)
        run: |
          set -e
          sleep 30
          curl -fsS "${{ steps.deploy.outputs.FRONTEND_URL }}" >/dev/null
          curl -fsS "${{ steps.deploy.outputs.CUSTOMER_URL }}/health" || true
          curl -fsS "${{ steps.deploy.outputs.PRODUCT_URL }}/health"  || true
          curl -fsS "${{ steps.deploy.outputs.ORDER_URL }}/health"    || true

      - name: Save RG/env for teardown
        run: |
          echo "${{ steps.vars.outputs.RG }}"       > staging-rg.txt
          echo "${{ steps.vars.outputs.ENV_NAME }}" > staging-env.txt

      - uses: actions/upload-artifact@v4
        with:
          name: staging-info
          path: |
            staging-rg.txt
            staging-env.txt

      - name: Print URLs
        run: |
          echo "FRONTEND: ${{ steps.deploy.outputs.FRONTEND_URL }}"
          echo "CUSTOMER: ${{ steps.deploy.outputs.CUSTOMER_URL }}"
          echo "PRODUCT : ${{ steps.deploy.outputs.PRODUCT_URL }}"
          echo "ORDER   : ${{ steps.deploy.outputs.ORDER_URL }}"
