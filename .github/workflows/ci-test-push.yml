name: CI - Test, Build & Push to ACR (Stage 1)

on:
  push:
    branches: [ "testing" ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  IMAGE_TAG: ${{ github.sha }}
  ACR_NAME: ${{ secrets.ACR_NAME }}
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}

jobs:
  test:
    name: Run service tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20

    strategy:
      fail-fast: false
      matrix:
        service: [customer_service, order_service, product_service]

    defaults:
      run:
        working-directory: backend/${{ matrix.service }}
        shell: bash

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install Python deps (always include pytest)
        run: |
          if [ -f requirements.txt ]; then
            python -m pip install -r requirements.txt
          elif [ -f ../../requirements.txt ]; then
            python -m pip install -r ../../requirements.txt
          fi
          # Always ensure test/runtime deps are present
          python -m pip install pytest pytest-asyncio httpx psycopg2-binary

      - name: Install psql client (for DB creation)
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Create DB for this service
        env:
          PGPASSWORD: postgres
        run: |
          # Decide DB name based on service
          DB=customers
          if [ "${{ matrix.service }}" = "order_service" ]; then DB=orders; fi
          if [ "${{ matrix.service }}" = "product_service" ]; then DB=products; fi

          # Create DB if missing
          psql -h localhost -U postgres -p 5432 -tc "SELECT 1 FROM pg_database WHERE datname='${DB}'" | grep -q 1 || \
            psql -h localhost -U postgres -p 5432 -c "CREATE DATABASE ${DB};"
          echo "Created/verified database: ${DB}"

      - name: Show pytest version (debug)
        run: python -m pytest --version

      - name: Run tests
        env:
          # Many test setups/apps read these env vars
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ${{ matrix.service == 'customer_service' && 'customers' || (matrix.service == 'order_service' && 'orders' || 'products') }}
          # If your app reads a single DATABASE_URL, set it too:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/${{ matrix.service == 'customer_service' && 'customers' || (matrix.service == 'order_service' && 'orders' || 'products') }}
        run: python -m pytest -q

  build_and_push:
    name: Build and push images to ACR
    needs: test
    runs-on: ubuntu-latest
    if: ${{ needs.test.result == 'success' }}

    steps:
      - uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: ACR login
        run: az acr login --name $ACR_NAME

      - name: Build images
        run: |
          docker build -f backend/customer_service/Dockerfile -t $ACR_LOGIN_SERVER/customer-service:${IMAGE_TAG} backend/customer_service
          docker build -f backend/order_service/Dockerfile    -t $ACR_LOGIN_SERVER/order-service:${IMAGE_TAG}    backend/order_service
          docker build -f backend/product_service/Dockerfile  -t $ACR_LOGIN_SERVER/product-service:${IMAGE_TAG}  backend/product_service
          docker build -f frontend/Dockerfile -t $ACR_LOGIN_SERVER/frontend:${IMAGE_TAG} frontend

      - name: Push images
        run: |
          docker push $ACR_LOGIN_SERVER/customer-service:${IMAGE_TAG}
          docker push $ACR_LOGIN_SERVER/order-service:${IMAGE_TAG}
          docker push $ACR_LOGIN_SERVER/product-service:${IMAGE_TAG}
          docker push $ACR_LOGIN_SERVER/frontend:${IMAGE_TAG}

      - name: Publish image references
        run: |
          printf "%s\n" \
            "$ACR_LOGIN_SERVER/customer-service:${IMAGE_TAG}" \
            "$ACR_LOGIN_SERVER/order-service:${IMAGE_TAG}" \
            "$ACR_LOGIN_SERVER/product-service:${IMAGE_TAG}" \
            "$ACR_LOGIN_SERVER/frontend:${IMAGE_TAG}" > image-refs.txt
      - uses: actions/upload-artifact@v4
        with:
          name: image-refs
          path: image-refs.txt
